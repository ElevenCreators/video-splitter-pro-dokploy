// src/server/jobs/splitVideo.ts
import ffmpeg from "@/lib/ffmpeg";
import { ensureDir } from "@/lib/fsutils";
import { outputDirFor, segmentPath } from "@/lib/paths";
import { logSegments } from "@/lib/logSegments";
import { logJobCreated, logFfmpegStart, logJobDone, logJobFailed, type Mode } from "@/lib/logging";

/**
 * Corta un video en segmentos de `seconds`.
 * Modo "copy" (r√°pido, sin recodificar) o "reencode" (compatibilidad universal).
 */
export async function splitVideo(
  jobId: string,
  inputPath: string,
  seconds: number,
  mode: Mode = "copy"
): Promise<{ jobId: string; outDir: string; mode: Mode; seconds: number }> {
  const outDir = outputDirFor(jobId);
  await ensureDir(outDir);

  logJobCreated(jobId, inputPath, seconds);

  const outputPattern = segmentPath(outDir);
  const cmd = ffmpeg(inputPath)
    .outputOptions([
      "-y",
      "-loglevel", "error",
      "-nostdin",
      "-ignore_unknown",
      "-map", "0:v:0",
      "-map", "0:a:0?",
      "-dn",
      "-sn",
      "-map_metadata", "-1",
      "-f", "segment",
      "-segment_time", String(seconds),
      "-reset_timestamps", "1",
      "-movflags", "+faststart",
      ...(mode === "copy"
        ? ["-c:v", "copy", "-c:a", "copy"]
        : ["-c:v", "libx264", "-preset", "veryfast", "-crf", "23", "-pix_fmt", "yuv420p", "-c:a", "aac", "-b:a", "128k"]),
    ])
    .output(outputPattern);

  logFfmpegStart(jobId, mode, inputPath, outputPattern);

  try {
    await new Promise<void>((resolve, reject) => {
      cmd.on("end", resolve).on("error", reject).run();
    });

    await logSegments(jobId);
    logJobDone(jobId, mode, outDir);

    return { jobId, outDir, mode, seconds };
  } catch (err) {
    logJobFailed(jobId, err);
    throw err;
  }
}